public interface IInteractable

Method Summary

All MethodsInstance MethodsAbstract Methods

Modifier and Type
Method
Description
IInteractable
click(IInteractableNaming name)

Click this element.

boolean
exists(IInteractableNaming name)

Checks existence of control in the DOM.

String
getAttribute(IInteractableNaming name,
 String attribute)

Get the value of the given attribute of the element.

String
getCssValue(IInteractableNaming name,
 String value)

Get the value of a given CSS property.

int
getHeight(IInteractableNaming name)

Returns height of wanted control.

org.openqa.selenium.Point
getLocation(IInteractableNaming name)

Returns location of wanted control.

String
getText(IInteractableNaming name,
 org.openqa.selenium.By... rootElement)

Returns text from wanted element.

int
getWidth(IInteractableNaming name)

Returns width of wanted control.

boolean
hasFocus(IInteractableNaming name)

Checks if wanted element has focus.

boolean
isBlank(IInteractableNaming name)

Checks if wanted control is empty or contain whitespace.

boolean
isClickable(IInteractableNaming name,
 org.openqa.selenium.By... rootElement)

Checks if wanted element is clickable.

boolean
isDisplayed(IInteractableNaming name)

Checks if wanted control is displayed.

boolean
isEmpty(IInteractableNaming name)

Checks if wanted control is empty.

boolean
isEnabled(IInteractableNaming name)

Is the element currently enabled or not? This will generally return true for everything but
 disabled input elements.

boolean
isMandatory(IInteractableNaming name)

Checks if wanted control is mandatory based on multiple conditions:
 1: label contains *
 2: webElement found by 'findControl()' has an attribute 'required'
 3: webElements class name contains 'required'
 4: webElements parent element, has 'label' element containing *
 5: label with 'for' attribute which is the same as webElements 'id' contains *

IInteractable
moveMouseOver(IInteractableNaming name)

Moves mouse over wanted control.

IInteractable
scrollIntoView(IInteractableNaming name)

Scrolls wanted element into the view.

IInteractable
sendKeys(IInteractableNaming name,
 String keys,
 boolean... clear)

Sends wanted string to wanted control.

IInteractable
sendKeys(org.openqa.selenium.By element,
 String keys,
 boolean... clear)

Sends wanted string to wanted control.

IInteractable
setAttribute(IInteractableNaming name,
 String attribute,
 String value)

Sets wanted attribute to wanted element.

IInteractable
waitForDisposal(IInteractableNaming control,
 Duration... duration)

Waits for disposal of wanted element.

IInteractable
waitForDisposal(org.openqa.selenium.By selector,
 Duration... duration)

Waits for disposal of wanted element.

IInteractable
waitToBeClickable(IInteractableNaming name,
 Duration... duration)

Waits for wanted control to become clickable.

IInteractable
waitToBeVisible(IInteractableNaming name,
 Duration... duration)

Waits for wanted control to become visible.

Method Details

isEmpty
boolean isEmpty(IInteractableNaming name)
Checks if wanted control is empty. Applies to Edit, Combo and TextArea.

Parameters:
name - Name of wanted control.
Returns:
true if wanted control has no value, otherwise false.

isBlank
boolean isBlank(IInteractableNaming name)
Checks if wanted control is empty or contain whitespace. Applies to Edit, Combo and TextArea.

Parameters:
name - Name of wanted control.
Returns:
true if wanted control has no value or has white space, otherwise false.

sendKeys
@CanIgnoreReturnValue
IInteractable sendKeys(IInteractableNaming name,
 String keys,
 boolean... clear)
Sends wanted string to wanted control. Function waits up to 10 seconds for findControl to deliver the element.

Parameters:
name - Control identifier.
keys - Wanted sequence.
clear - Clears the input before sending the new content.
Returns:
IInteractable interface.

sendKeys
@CanIgnoreReturnValue
IInteractable sendKeys(org.openqa.selenium.By element,
 String keys,
 boolean... clear)
Sends wanted string to wanted control.

Parameters:
element - Control identifier.
keys - Wanted sequence.
clear - Clears the input before sending the new content.
Returns:
IInteractable interface.

moveMouseOver
@CanIgnoreReturnValue
IInteractable moveMouseOver(IInteractableNaming name)
Moves mouse over wanted control.

Parameters:
name - Identification ENUM which implements IInteractable interface.
Returns:
IInteractable interface.

hasFocus
boolean hasFocus(IInteractableNaming name)
Checks if wanted element has focus.

Parameters:
name - Name of wanted element.
Returns:
true if focused, false in any other case.

click
@CanIgnoreReturnValue
IInteractable click(IInteractableNaming name)
Click this element. If this causes a new page to load, you
 should discard all references to this element and any further
 operations performed on this element will throw a
 StaleElementReferenceException.
 
 Note that if click() is done by sending a native event (which is
 the default on most browsers/platforms) then the method will
 _not_ wait for the next page to load and the caller should verify
 that themselves.

Parameters:
name - Identifier of wanted control.
Returns:
IInteractable interface.

isDisplayed
boolean isDisplayed(IInteractableNaming name)
Checks if wanted control is displayed.

Parameters:
name - - label name or index of wanted control.
Returns:
- boolean value.

exists
boolean exists(IInteractableNaming name)
Checks existence of control in the DOM. Existence of object does not necessarily mean that the object is visible or displayed.

Parameters:
name - - label name or index of wanted control.
Returns:
boolean value.

isEnabled
boolean isEnabled(IInteractableNaming name)
Is the element currently enabled or not? This will generally return true for everything but
 disabled input elements.

Parameters:
name - Identifier of wanted control.
Returns:
True if the element is enabled, false otherwise.

isClickable
boolean isClickable(IInteractableNaming name,
 org.openqa.selenium.By... rootElement)
Checks if wanted element is clickable.

Parameters:
name - Identifier for wanted element.
rootElement - Optional root element from which the search for wanted element will start.
Returns:
true if element is clickable otherwise false.

getLocation
org.openqa.selenium.Point getLocation(IInteractableNaming name)
Returns location of wanted control.

Parameters:
name - name of wanted control.
Returns:
location as Point.

getHeight
int getHeight(IInteractableNaming name)
Returns height of wanted control.

Parameters:
name - identifier of wanted control.
Returns:
height as int.

getWidth
int getWidth(IInteractableNaming name)
Returns width of wanted control.

Parameters:
name - identifier of wanted control.
Returns:
width as int.

getCssValue
String getCssValue(IInteractableNaming name,
 String value)
Get the value of a given CSS property.
 Color values should be returned as rgba strings, so,
 for example if the "background-color" property is set as "green" in the
 HTML source, the returned value will be "rgba(0, 255, 0, 1)".
 
 Note that shorthand CSS properties (e.g. background, font, border, border-top, margin,
 margin-top, padding, padding-top, list-style, outline, pause, cue) are not returned,
 in accordance with the
 DOM CSS2 specification
 - you should directly access the longhand properties (e.g. background-color) to access the
 desired values.

Parameters:
name - Identifier of wanted control.
value - the css property name of the element
Returns:
The current, computed value of the property as String.

getAttribute
String getAttribute(IInteractableNaming name,
 String attribute)
Get the value of the given attribute of the element. Will return the current value, even if
 this has been modified after the page has been loaded.

 More exactly, this method will return the value of the property with the given name, if it
 exists. If it does not, then the value of the attribute with the given name is returned. If
 neither exists, null is returned.

 The "style" attribute is converted as best can be to a text representation with a trailing
 semicolon.

 The following are deemed to be "boolean" attributes, and will return either "true" or null:

 async, autofocus, autoplay, checked, compact, complete, controls, declare, defaultchecked,
 defaultselected, defer, disabled, draggable, ended, formnovalidate, hidden, indeterminate,
 iscontenteditable, ismap, itemscope, loop, multiple, muted, nohref, noresize, noshade,
 novalidate, nowrap, open, paused, pubdate, readonly, required, reversed, scoped, seamless,
 seeking, selected, truespeed, willvalidate

 Finally, the following commonly mis-capitalized attribute/property names are evaluated as
 expected:

 
If the given name is "class", the "className" property is returned.
 If the given name is "readonly", the "readOnly" property is returned.
 
Note: The reason for this behavior is that users frequently confuse attributes and
 properties. If you need to do something more precise, e.g., refer to an attribute even when a
 property of the same name exists, then you should evaluate Javascript to obtain the result
 you desire.

Parameters:
name - Identifier of wanted control.
attribute - The name of the attribute.
Returns:
The attribute/property's current value or null as String if the value is not set.

setAttribute
@CanIgnoreReturnValue
IInteractable setAttribute(IInteractableNaming name,
 String attribute,
 String value)
Sets wanted attribute to wanted element.

Parameters:
name - Identifier of wanted element.
attribute - Wanted attribute.
value - Value of wanted attribute.
Returns:
IInteractable interface.

getText
String getText(IInteractableNaming name,
 org.openqa.selenium.By... rootElement)
Returns text from wanted element.

Parameters:
name - Identifier of wanted control.
rootElement - Wanted root element.
Returns:
Text from wanted element.

waitToBeClickable
@CanIgnoreReturnValue
IInteractable waitToBeClickable(IInteractableNaming name,
 Duration... duration)
Waits for wanted control to become clickable. Maximal wait time is 10 seconds.

Parameters:
name - Name of wanted control.
duration - Duration to wait until timeout.
Returns:
IInteractable interface.

waitForDisposal
IInteractable waitForDisposal(IInteractableNaming control,
 Duration... duration)
Waits for disposal of wanted element.

Parameters:
control - Enum for wanted element.
duration - Optional waittime, default is 20 seconds.
Returns:
IInteractable interface.

waitForDisposal
@CanIgnoreReturnValue
IInteractable waitForDisposal(org.openqa.selenium.By selector,
 Duration... duration)
Waits for disposal of wanted element.

Parameters:
selector - Selector for wanted element.
duration - Optional waittime, default is 20 seconds.
Returns:
IInteractable interface.

waitToBeVisible
@CanIgnoreReturnValue
IInteractable waitToBeVisible(IInteractableNaming name,
 Duration... duration)
Waits for wanted control to become visible. Maximal wait time is 10 seconds.

Parameters:
name - Name of wanted control.
duration - Duration to wait until timeout.
Returns:
IInteractable interface.

scrollIntoView
@CanIgnoreReturnValue
IInteractable scrollIntoView(IInteractableNaming name)
Scrolls wanted element into the view.

Parameters:
name - Name of wanted element which should be scrolled in to view.
Returns:
IInteractable interface.

isMandatory
boolean isMandatory(IInteractableNaming name)
Checks if wanted control is mandatory based on multiple conditions:
 1: label contains *
 2: webElement found by 'findControl()' has an attribute 'required'
 3: webElements class name contains 'required'
 4: webElements parent element, has 'label' element containing *
 5: label with 'for' attribute which is the same as webElements 'id' contains *

Parameters:
name - Name of wanted control.
Returns:
boolean value